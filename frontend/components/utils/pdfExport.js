// frontend/components/utils/pdfExport.js
import { jsPDF } from 'jspdf';
import 'jspdf-autotable'; // For table support

/**
 * Formats the analysis results into a structured string suitable for PDF/Word export.
 * Includes SEO meta, questions, answers, and skill gaps.
 * @param {object} analysisData - The comprehensive analysis results.
 * @returns {string} - Formatted text content.
 */
export function formatReportContent(analysisData) {
  const {
    jobTitle,
    requiredSkills,
    keyTools,
    seoSummary,
    interviewQnA,
    skillGap,
    affiliateSuggestions,
    seo
  } = analysisData;

  let content = `
    # Interview Question Analysis Report: ${jobTitle}

    ---

    ## 📄 Job Description Insights

    ### Job Title: ${jobTitle}
    ### Required Skills: ${requiredSkills.join(', ')}
    ### Key Tools: ${keyTools.join(', ')}

    ### SEO Summary:
    ${seoSummary}

    ---

    ## ❓ Interview Questions & Answers

  `;

  interviewQnA.forEach((qa, index) => {
    content += `
      ### ${index + 1}. ${qa.question} (${qa.type})
      **Answer:**
      ${qa.answer}

    `;
  });

  content += `
    ---

    ## ⚠️ Skill Gap Analysis

    ### Missing Skills:
    ${skillGap && skillGap.length > 0 ? skillGap.map(skill => `- ${skill}`).join('\n') : 'No specific skill gaps identified or resume not provided.'}

    ### Recommended Resources:
  `;

  if (affiliateSuggestions && affiliateSuggestions.length > 0) {
    affiliateSuggestions.forEach(suggestion => {
      content += `
        - **${suggestion.resourceTitle}** for ${suggestion.skill} → ${suggestion.affiliateLinkPlaceholder}
      `;
    });
  } else {
    content += `
      No specific resource suggestions at this time.
    `;
  }

  content += `
    ---

    ## 🔍 SEO Metadata for this Report

    ### Meta Title:
    ${seo.metaTitle}

    ### Meta Description:
    ${seo.metaDescription}

    ### FAQ Schema (JSON-LD):
    \`\`\`json
    ${JSON.stringify(seo.faqSchema, null, 2)}
    \`\`\`

    ---

    *This report was generated by the Interview Question Analyzer.*
  `;

  return content;
}


/**
 * Generates and downloads a PDF report from the analysis data.
 * @param {object} analysisData - The comprehensive analysis results.
 */
export function generatePdfReport(analysisData) {
  const doc = new jsPDF();
  const {
    jobTitle,
    requiredSkills,
    keyTools,
    seoSummary,
    interviewQnA,
    skillGap,
    affiliateSuggestions,
    seo
  } = analysisData;

  let yOffset = 15;
  const margin = 15;
  const lineHeight = 7;

  doc.setFontSize(22);
  doc.text(`Interview Analysis Report: ${jobTitle}`, margin, yOffset);
  yOffset += 10;
  doc.line(margin, yOffset, 200 - margin, yOffset); // Horizontal line
  yOffset += 10;

  doc.setFontSize(16);
  doc.text('📄 Job Description Insights', margin, yOffset);
  yOffset += lineHeight;

  doc.setFontSize(12);
  doc.text(`Job Title: ${jobTitle}`, margin, yOffset);
  yOffset += lineHeight;
  doc.text(`Required Skills: ${requiredSkills.join(', ')}`, margin, yOffset);
  yOffset += lineHeight;
  doc.text(`Key Tools: ${keyTools.join(', ')}`, margin, yOffset);
  yOffset += lineHeight;

  doc.setFontSize(14);
  doc.text('SEO Summary:', margin, yOffset);
  yOffset += lineHeight;
  doc.setFontSize(12);
  const splitSeoSummary = doc.splitTextToSize(seoSummary, 180);
  doc.text(splitSeoSummary, margin, yOffset);
  yOffset += splitSeoSummary.length * lineHeight + 5;

  yOffset += 5;
  doc.line(margin, yOffset, 200 - margin, yOffset); // Horizontal line
  yOffset += 10;

  doc.setFontSize(16);
  doc.text('❓ Interview Questions & Answers', margin, yOffset);
  yOffset += lineHeight;

  interviewQnA.forEach((qa, index) => {
    if (yOffset > 280) { // Check if new page is needed
      doc.addPage();
      yOffset = margin;
    }
    doc.setFontSize(12);
    const questionText = `${index + 1}. ${qa.question} (${qa.type})`;
    const splitQuestion = doc.splitTextToSize(questionText, 180);
    doc.text(splitQuestion, margin, yOffset);
    yOffset += splitQuestion.length * lineHeight;

    doc.setFontSize(10);
    doc.text('Answer:', margin + 5, yOffset);
    yOffset += lineHeight - 2;
    const splitAnswer = doc.splitTextToSize(qa.answer, 175);
    doc.text(splitAnswer, margin + 5, yOffset);
    yOffset += splitAnswer.length * lineHeight + 5;
  });

  yOffset += 5;
  if (yOffset > 280) { // Check if new page is needed
      doc.addPage();
      yOffset = margin;
  }
  doc.line(margin, yOffset, 200 - margin, yOffset); // Horizontal line
  yOffset += 10;

  doc.setFontSize(16);
  doc.text('⚠️ Skill Gap Analysis', margin, yOffset);
  yOffset += lineHeight;

  doc.setFontSize(12);
  doc.text('Missing Skills:', margin, yOffset);
  yOffset += lineHeight;
  if (skillGap && skillGap.length > 0) {
    skillGap.forEach(skill => {
      if (yOffset > 280) { doc.addPage(); yOffset = margin; }
      doc.text(`- ${skill}`, margin + 5, yOffset);
      yOffset += lineHeight;
    });
  } else {
    if (yOffset > 280) { doc.addPage(); yOffset = margin; }
    doc.text('No specific skill gaps identified or resume not provided.', margin + 5, yOffset);
    yOffset += lineHeight;
  }
  yOffset += 5;

  doc.setFontSize(12);
  doc.text('Recommended Resources:', margin, yOffset);
  yOffset += lineHeight;
  if (affiliateSuggestions && affiliateSuggestions.length > 0) {
    affiliateSuggestions.forEach(suggestion => {
      if (yOffset > 280) { doc.addPage(); yOffset = margin; }
      const resourceText = `- ${suggestion.resourceTitle} for ${suggestion.skill} → ${suggestion.affiliateLinkPlaceholder}`;
      const splitResource = doc.splitTextToSize(resourceText, 180);
      doc.text(splitResource, margin + 5, yOffset);
      yOffset += splitResource.length * lineHeight;
    });
  } else {
    if (yOffset > 280) { doc.addPage(); yOffset = margin; }
    doc.text('No specific resource suggestions at this time.', margin + 5, yOffset);
    yOffset += lineHeight;
  }
  yOffset += 5;

  if (yOffset > 270) { // Ensure enough space for SEO section or new page
      doc.addPage();
      yOffset = margin;
  }
  doc.line(margin, yOffset, 200 - margin, yOffset); // Horizontal line
  yOffset += 10;

  doc.setFontSize(16);
  doc.text('🔍 SEO Metadata for this Report', margin, yOffset);
  yOffset += lineHeight;

  doc.setFontSize(12);
  doc.text(`Meta Title: ${seo.metaTitle}`, margin, yOffset);
  yOffset += lineHeight;
  doc.text(`Meta Description: ${seo.metaDescription}`, margin, yOffset);
  yOffset += lineHeight;
  doc.text('FAQ Schema (JSON-LD):', margin, yOffset);
  yOffset += lineHeight;
  const jsonSchema = JSON.stringify(seo.faqSchema, null, 2);
  const splitSchema = doc.splitTextToSize(jsonSchema, 180);
  splitSchema.forEach(line => {
    if (yOffset > 280) { doc.addPage(); yOffset = margin; }
    doc.setFont('courier'); // Monospace font for code-like text
    doc.text(line, margin + 5, yOffset);
    doc.setFont('helvetica'); // Reset font
    yOffset += lineHeight - 2;
  });
  yOffset += 5;

  if (yOffset > 280) {
      doc.addPage();
      yOffset = margin;
  }
  doc.line(margin, yOffset, 200 - margin, yOffset); // Horizontal line
  yOffset += 10;

  doc.setFontSize(10);
  doc.text('*This report was generated by the Interview Question Analyzer.*', margin, yOffset);


  doc.save(`${jobTitle.toLowerCase().replace(/\s/g, '-')}-interview-report.pdf`);
}
